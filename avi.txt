const fs = require('fs');
const path = require('path');
const { test, expect } = require('@playwright/test');

// Function to load the HAR file
function loadHarFile(harFilePath) {
    return JSON.parse(fs.readFileSync(harFilePath, 'utf8'));
}

// Function to dynamically load postData based on the file path in the HAR file
function loadPostDataFromFile(postDataFilePath) {
    const fullPath = path.resolve(__dirname, postDataFilePath); // Resolving relative path to absolute
    return JSON.parse(fs.readFileSync(fullPath, 'utf8'));
}

// Function to match intercepted requests with the HAR data and postData
function matchRequestWithHar(request, harData) {
    const requestData = request.postData() ? JSON.parse(request.postData()) : null;

    // Find matching HAR entry by URL and method
    const matchingHarEntry = harData.log.entries.find(entry => {
        return entry.request.url === request.url() && entry.request.method === request.method();
    });

    if (matchingHarEntry) {
        const harRequestData = matchingHarEntry.request.postData ? JSON.parse(matchingHarEntry.request.postData.text) : null;

        // Check if postData is provided in the response and load it dynamically
        if (matchingHarEntry.response && matchingHarEntry.response.content && matchingHarEntry.response.content.path) {
            const postDataFilePath = matchingHarEntry.response.content.path; // Path from HAR response
            const postData = loadPostDataFromFile(postDataFilePath); // Load postData from the file

            // Compare the request data with the dynamically loaded postData
            if (requestData && postData) {
                // You can modify this logic depending on how your postData is structured
                if (requestData.data && postData.data) {
                    requestData.data.var = postData.data.var; // Example: Normalize dynamic fields
                }

                // Compare normalized request data with the dynamically loaded postData
                return JSON.stringify(requestData) === JSON.stringify(postData);
            }
        }
    }

    return false; // No match found
}

// Test case using the HAR file and dynamically loaded postData for request matching
test('Test with HAR replay and dynamic postData matching', async ({ page }) => {
    const harFilePath = path.resolve(__dirname, 'path/to/your.har'); // Path to the HAR file

    // Load the HAR file
    const harData = loadHarFile(harFilePath);

    // Set up route interception and custom matching logic
    await page.route('**/*', (route, request) => {
        if (matchRequestWithHar(request, harData)) {
            // If request matches the HAR entry and postData, continue the request
            route.continue();
        } else {
            // If no match, abort the request
            route.abort();
        }
    });

    // Navigate to your app or trigger requests to be matched
    await page.goto('https://your-app-url.com');

    // Perform assertions
    expect(await page.title()).toBe('Your App Title');
});
