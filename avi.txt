import * as fs from 'fs';

type JSONValue = string | number | boolean | JSONObject | JSONValue[];
interface JSONObject { [key: string]: JSONValue }
type JSONArray = JSONObject[];

function updateFromArray(target: JSONValue, updatesArr: JSONArray): JSONValue {
  if (Array.isArray(target)) {
    return target.map(item => updateFromArray(item, updatesArr));
  }

  if (typeof target === 'object' && target !== null) {
    const idMatch = target['name'];
    const match = typeof idMatch === 'string'
      ? updatesArr.find(obj => obj.id === idMatch)
      : null;

    const result: JSONObject = {};

    for (const [key, value] of Object.entries(target)) {
      if (typeof value === 'object') {
        result[key] = updateFromArray(value, updatesArr);
      } else if (match && match.hasOwnProperty(key)) {
        result[key] = match[key];
      } else {
        result[key] = value;
      }
    }

    return result;
  }

  return target;
}

// Load JSON files
const updates = JSON.parse(fs.readFileSync('a.json', 'utf-8')) as JSONArray;
const original = JSON.parse(fs.readFileSync('b.json', 'utf-8'));

// Update
const updated = updateFromArray(original, updates);

// Save result
fs.writeFileSync('updated_b.json', JSON.stringify(updated, null, 2));
